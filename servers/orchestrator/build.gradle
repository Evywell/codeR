plugins {
    id 'coder.code-quality'
    id 'coder.global'
    id 'coder.debug'
    id 'application'
}

ktlint {
    disabledRules = ["indent", "chain-wrapping"]
    verbose = true
}

dependencies {
    compile project(':core')
    compile project(':client')
    compile project(':shared')
    testCompile project(':core').sourceSets.test.output
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                'fr/rob/entities/**',
                'fr/rob/orchestrator/OrchestratorApplication**',
                'fr/rob/orchestrator/Main**',
                'fr/rob/orchestrator/config/DatabaseConfigHandler**',
                'fr/rob/orchestrator/security/SecurityModule**',
                'fr/rob/orchestrator/network/netty/**',
                'fr/rob/orchestrator/agent/network/ClientHandler**'
            ])
        }))
    }
}

task cucumber() {
    dependsOn assemble, testClasses
    doLast {
        javaexec {
            main = "io.cucumber.core.cli.Main"
            classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
            args = ['--plugin', 'pretty', '--glue', 'fr.rob.orchestrator.test.cucumber', 'src/test/kotlin']
        }
    }
}

mainClassName = 'fr.rob.orchestrator.Main'
