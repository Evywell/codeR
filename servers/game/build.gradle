plugins {
    id 'coder.code-quality'
    id 'coder.global'
    id 'coder.debug'
    id 'coder.protobuf'
    id 'coder.proto-files'
    id 'application'
    id 'coder.grpc'
    id 'com.avast.gradle.docker-compose'
    id 'com.google.protobuf' version '0.8.18'
}

dependencies {
    implementation project(':core')
    implementation project(':orchestrator:shared')

    implementation 'com.google.guava:guava:31.0.1-jre'
    implementation 'io.insert-koin:koin-core:3.2.0-beta-1'
    implementation 'com.xenomachina:kotlin-argparser:2.0.7'
    implementation 'fr.raven.messaging:lib:0.1.1'
    implementation 'fr.raven.log:lib:0.1.1'

    testImplementation project(':core').sourceSets.test.output
}

sourceSets {
    main {
        java {
            srcDirs 'build/generated/source/proto/main/java'
            srcDirs 'build/generated/source/proto/main/grpc'
        }
    }
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

tasks.register('copyConfigProperties', Copy) {
    from layout.projectDirectory.file("src/main/resources/config.properties")
    into layout.projectDirectory.file("src/dist")
}

distZip.dependsOn('copyConfigProperties')

jacocoTestReport {
    dependsOn test

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                'fr/rob/entities/**',
                'fr/rob/game/infrastructure/**',
                'fr/rob/game/domain/network/**',
                'fr/rob/game/domain/setup/tasks/TaskAuthCollectJWTPublicKey.class',
                'fr/rob/game/domain/setup/tasks/CertsResponse.class',
                'fr/rob/game/Main**',
                'fr/rob/game/GameServerSupervisorApplication.class'
            ])
        }))
    }
}

jacoco {
    toolVersion = "0.8.7"
}

dockerCompose.isRequiredBy(run)

dockerCompose {
    dockerComposeWorkingDirectory = project.rootProject.projectDir
    projectName = 'coder'
    removeVolumes = false
}

mainClassName = 'fr.rob.game.Main'
