import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

plugins {
    id 'org.jetbrains.kotlin.jvm'
    id 'java'
    id 'org.jlleitschuh.gradle.ktlint'
    id 'jacoco'
}

group = 'fr.rob'
version = '1.0'

repositories {
    mavenCentral()
    gradlePluginPortal()
}

ktlint {
    disabledRules = ["indent", "chain-wrapping"]
    verbose = true
}

dependencies {
    compile group: 'io.cucumber', name: 'cucumber-picocontainer', version: '6.10.4'

    testImplementation "org.junit.jupiter:junit-jupiter-api:5.7.1"
    testImplementation "org.mockito.kotlin:mockito-kotlin:3.2.0"
    testImplementation "org.junit.jupiter:junit-jupiter-params:5.7.1"
    testImplementation "io.cucumber:cucumber-java:6.10.4"
    testImplementation "io.cucumber:cucumber-junit:6.10.4"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.7.1"
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test

    reports {
        xml.enabled false
        csv.enabled false
        html.enabled true
    }
}

jacoco {
    toolVersion = "0.8.7"
}

// https://stackoverflow.com/a/36130467
tasks.withType(Test) {
    testLogging {
        // set options for log level LIFECYCLE
        events TestLogEvent.FAILED,
                TestLogEvent.PASSED,
                TestLogEvent.SKIPPED,
                TestLogEvent.STANDARD_OUT
        exceptionFormat TestExceptionFormat.FULL
        showExceptions true
        showCauses true
        showStackTraces true

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}

configurations {
    cucumberRuntime {
        extendsFrom testImplementation
    }
}
